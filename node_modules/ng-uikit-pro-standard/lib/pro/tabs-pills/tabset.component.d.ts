import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { TabDirective } from './tab.directive';
import { TabsetConfig } from './tabset.config';
import { WavesDirective } from '../../free/waves/waves-effect.directive';
import * as ɵngcc0 from '@angular/core';
export declare class TabsetComponent implements OnDestroy, OnInit, AfterViewInit {
    ripple: WavesDirective;
    private cdRef;
    private renderer;
    tabs: TabDirective[];
    classMap: any;
    protected isDestroyed: boolean;
    protected _vertical: boolean;
    protected _justified: boolean;
    protected _type: string;
    listGetClass: String;
    tabsGetClass: String;
    isBrowser: any;
    clazz: boolean;
    disableWaves: boolean;
    buttonClass: String;
    contentClass: String;
    tabsButtonsClass: string;
    tabsContentClass: string;
    itemsList: ElementRef;
    tabEl: any;
    showBsTab: EventEmitter<any>;
    shownBsTab: EventEmitter<any>;
    hideBsTab: EventEmitter<any>;
    hiddenBsTab: EventEmitter<any>;
    getActiveTab: EventEmitter<any>;
    /** if true tabs will be placed vertically */
    vertical: boolean;
    setActiveTab(index: number): void;
    /** if true tabs fill the container and have a consistent width */
    justified: boolean;
    /** navigation context class: 'tabs' or 'pills' */
    type: string;
    constructor(platformId: string, config: TabsetConfig, ripple: WavesDirective, cdRef: ChangeDetectorRef, renderer: Renderer2);
    click(event: any, index: any): void;
    ngOnDestroy(): void;
    getActive(): any;
    addTab(tab: TabDirective): void;
    removeTab(tab: TabDirective): void;
    protected getClosestTabIndex(index: number): number;
    protected hasAvailableTabs(index: number): boolean;
    protected setClassMap(): void;
    listGet(): void;
    tabsGet(): void;
    getActiveElement(): any;
    showActiveIndex(): void;
    private getFirstActiveTabIndex;
    private removeActiveTabs;
    initActiveTab(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabsetComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabsetComponent, "mdb-tabset", never, { "disableWaves": "disableWaves"; "vertical": "vertical"; "justified": "justified"; "type": "type"; "buttonClass": "buttonClass"; "contentClass": "contentClass"; "tabsButtonsClass": "tabsButtonsClass"; "tabsContentClass": "tabsContentClass"; }, { "showBsTab": "showBsTab"; "shownBsTab": "shownBsTab"; "hideBsTab": "hideBsTab"; "hiddenBsTab": "hiddenBsTab"; "getActiveTab": "getActiveTab"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFic2V0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0YWJzZXQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhYkRpcmVjdGl2ZSB9IGZyb20gJy4vdGFiLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBUYWJzZXRDb25maWcgfSBmcm9tICcuL3RhYnNldC5jb25maWcnO1xuaW1wb3J0IHsgV2F2ZXNEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9mcmVlL3dhdmVzL3dhdmVzLWVmZmVjdC5kaXJlY3RpdmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFic2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICAgIHJpcHBsZTogV2F2ZXNEaXJlY3RpdmU7XG4gICAgcHJpdmF0ZSBjZFJlZjtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHRhYnM6IFRhYkRpcmVjdGl2ZVtdO1xuICAgIGNsYXNzTWFwOiBhbnk7XG4gICAgcHJvdGVjdGVkIGlzRGVzdHJveWVkOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfdmVydGljYWw6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIF9qdXN0aWZpZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIF90eXBlOiBzdHJpbmc7XG4gICAgbGlzdEdldENsYXNzOiBTdHJpbmc7XG4gICAgdGFic0dldENsYXNzOiBTdHJpbmc7XG4gICAgaXNCcm93c2VyOiBhbnk7XG4gICAgY2xheno6IGJvb2xlYW47XG4gICAgZGlzYWJsZVdhdmVzOiBib29sZWFuO1xuICAgIGJ1dHRvbkNsYXNzOiBTdHJpbmc7XG4gICAgY29udGVudENsYXNzOiBTdHJpbmc7XG4gICAgdGFic0J1dHRvbnNDbGFzczogc3RyaW5nO1xuICAgIHRhYnNDb250ZW50Q2xhc3M6IHN0cmluZztcbiAgICBpdGVtc0xpc3Q6IEVsZW1lbnRSZWY7XG4gICAgdGFiRWw6IGFueTtcbiAgICBzaG93QnNUYWI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHNob3duQnNUYWI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGhpZGVCc1RhYjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgaGlkZGVuQnNUYWI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGdldEFjdGl2ZVRhYjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqIGlmIHRydWUgdGFicyB3aWxsIGJlIHBsYWNlZCB2ZXJ0aWNhbGx5ICovXG4gICAgdmVydGljYWw6IGJvb2xlYW47XG4gICAgc2V0QWN0aXZlVGFiKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKiBpZiB0cnVlIHRhYnMgZmlsbCB0aGUgY29udGFpbmVyIGFuZCBoYXZlIGEgY29uc2lzdGVudCB3aWR0aCAqL1xuICAgIGp1c3RpZmllZDogYm9vbGVhbjtcbiAgICAvKiogbmF2aWdhdGlvbiBjb250ZXh0IGNsYXNzOiAndGFicycgb3IgJ3BpbGxzJyAqL1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihwbGF0Zm9ybUlkOiBzdHJpbmcsIGNvbmZpZzogVGFic2V0Q29uZmlnLCByaXBwbGU6IFdhdmVzRGlyZWN0aXZlLCBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIGNsaWNrKGV2ZW50OiBhbnksIGluZGV4OiBhbnkpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgZ2V0QWN0aXZlKCk6IGFueTtcbiAgICBhZGRUYWIodGFiOiBUYWJEaXJlY3RpdmUpOiB2b2lkO1xuICAgIHJlbW92ZVRhYih0YWI6IFRhYkRpcmVjdGl2ZSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGdldENsb3Nlc3RUYWJJbmRleChpbmRleDogbnVtYmVyKTogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBoYXNBdmFpbGFibGVUYWJzKGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBzZXRDbGFzc01hcCgpOiB2b2lkO1xuICAgIGxpc3RHZXQoKTogdm9pZDtcbiAgICB0YWJzR2V0KCk6IHZvaWQ7XG4gICAgZ2V0QWN0aXZlRWxlbWVudCgpOiBhbnk7XG4gICAgc2hvd0FjdGl2ZUluZGV4KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXRGaXJzdEFjdGl2ZVRhYkluZGV4O1xuICAgIHByaXZhdGUgcmVtb3ZlQWN0aXZlVGFicztcbiAgICBpbml0QWN0aXZlVGFiKCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbn1cbiJdfQ==
import { Injector, ComponentRef } from '@angular/core';
import { Observable } from 'rxjs';
import { Overlay } from '../overlay/overlay';
import { GlobalConfig, IndividualConfig } from './toast.config';
import { ToastContainerDirective } from './toast.directive';
import { DomSanitizer } from '@angular/platform-browser';
import { ToastRef } from './toast-ref';
import * as ɵngcc0 from '@angular/core';
export interface ActiveToast {
    toastId?: number;
    message?: string;
    portal?: ComponentRef<any>;
    toastRef?: ToastRef<any>;
    onShown?: Observable<any>;
    onHidden?: Observable<any>;
    onTap?: Observable<any>;
    onAction?: Observable<any>;
}
export declare class ToastService {
    toastConfig: GlobalConfig | any;
    private overlay;
    private _injector;
    private sanitizer;
    index: number;
    previousToastMessage: string;
    currentlyActive: number;
    toasts: ActiveToast[];
    overlayContainer: ToastContainerDirective;
    constructor(toastConfig: GlobalConfig | any, overlay: Overlay, _injector: Injector, sanitizer: DomSanitizer);
    /** show successful toast */
    show(message: string, title?: string | any, override?: IndividualConfig | any, type?: string): any;
    /** show successful toast */
    success(message: string, title?: string | any, override?: IndividualConfig): any;
    /** show error toast */
    error(message: string, title?: string | any, override?: IndividualConfig): any;
    /** show info toast */
    info(message: string, title?: string | any, override?: IndividualConfig): any;
    /** show warning toast */
    warning(message: string, title?: string | any, override?: IndividualConfig): any;
    /**
     * Remove all or a single toast by id
     */
    clear(toastId?: number): void;
    /**
     * Remove and destroy a single toast by id
     */
    remove(toastId: number): boolean;
    /**
     * Determines if toast message is already shown
     */
    isDuplicate(message: string): boolean;
    /** create a clone of global config and apply individual settings */
    private applyConfig;
    /**
     * Find toast object by id
     */
    private _findToast;
    /**
     * Creates and attaches toast data to component
     * returns null if toast is duplicate and preventDuplicates == True
     */
    private _buildNotification;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ToastService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Quc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJ0b2FzdC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yLCBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE92ZXJsYXkgfSBmcm9tICcuLi9vdmVybGF5L292ZXJsYXknO1xuaW1wb3J0IHsgR2xvYmFsQ29uZmlnLCBJbmRpdmlkdWFsQ29uZmlnIH0gZnJvbSAnLi90b2FzdC5jb25maWcnO1xuaW1wb3J0IHsgVG9hc3RDb250YWluZXJEaXJlY3RpdmUgfSBmcm9tICcuL3RvYXN0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IFRvYXN0UmVmIH0gZnJvbSAnLi90b2FzdC1yZWYnO1xuZXhwb3J0IGludGVyZmFjZSBBY3RpdmVUb2FzdCB7XG4gICAgdG9hc3RJZD86IG51bWJlcjtcbiAgICBtZXNzYWdlPzogc3RyaW5nO1xuICAgIHBvcnRhbD86IENvbXBvbmVudFJlZjxhbnk+O1xuICAgIHRvYXN0UmVmPzogVG9hc3RSZWY8YW55PjtcbiAgICBvblNob3duPzogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIG9uSGlkZGVuPzogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIG9uVGFwPzogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIG9uQWN0aW9uPzogT2JzZXJ2YWJsZTxhbnk+O1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3RTZXJ2aWNlIHtcbiAgICB0b2FzdENvbmZpZzogR2xvYmFsQ29uZmlnIHwgYW55O1xuICAgIHByaXZhdGUgb3ZlcmxheTtcbiAgICBwcml2YXRlIF9pbmplY3RvcjtcbiAgICBwcml2YXRlIHNhbml0aXplcjtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIHByZXZpb3VzVG9hc3RNZXNzYWdlOiBzdHJpbmc7XG4gICAgY3VycmVudGx5QWN0aXZlOiBudW1iZXI7XG4gICAgdG9hc3RzOiBBY3RpdmVUb2FzdFtdO1xuICAgIG92ZXJsYXlDb250YWluZXI6IFRvYXN0Q29udGFpbmVyRGlyZWN0aXZlO1xuICAgIGNvbnN0cnVjdG9yKHRvYXN0Q29uZmlnOiBHbG9iYWxDb25maWcgfCBhbnksIG92ZXJsYXk6IE92ZXJsYXksIF9pbmplY3RvcjogSW5qZWN0b3IsIHNhbml0aXplcjogRG9tU2FuaXRpemVyKTtcbiAgICAvKiogc2hvdyBzdWNjZXNzZnVsIHRvYXN0ICovXG4gICAgc2hvdyhtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nIHwgYW55LCBvdmVycmlkZT86IEluZGl2aWR1YWxDb25maWcgfCBhbnksIHR5cGU/OiBzdHJpbmcpOiBhbnk7XG4gICAgLyoqIHNob3cgc3VjY2Vzc2Z1bCB0b2FzdCAqL1xuICAgIHN1Y2Nlc3MobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZyB8IGFueSwgb3ZlcnJpZGU/OiBJbmRpdmlkdWFsQ29uZmlnKTogYW55O1xuICAgIC8qKiBzaG93IGVycm9yIHRvYXN0ICovXG4gICAgZXJyb3IobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZyB8IGFueSwgb3ZlcnJpZGU/OiBJbmRpdmlkdWFsQ29uZmlnKTogYW55O1xuICAgIC8qKiBzaG93IGluZm8gdG9hc3QgKi9cbiAgICBpbmZvKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcgfCBhbnksIG92ZXJyaWRlPzogSW5kaXZpZHVhbENvbmZpZyk6IGFueTtcbiAgICAvKiogc2hvdyB3YXJuaW5nIHRvYXN0ICovXG4gICAgd2FybmluZyhtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nIHwgYW55LCBvdmVycmlkZT86IEluZGl2aWR1YWxDb25maWcpOiBhbnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBvciBhIHNpbmdsZSB0b2FzdCBieSBpZFxuICAgICAqL1xuICAgIGNsZWFyKHRvYXN0SWQ/OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbmQgZGVzdHJveSBhIHNpbmdsZSB0b2FzdCBieSBpZFxuICAgICAqL1xuICAgIHJlbW92ZSh0b2FzdElkOiBudW1iZXIpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdG9hc3QgbWVzc2FnZSBpcyBhbHJlYWR5IHNob3duXG4gICAgICovXG4gICAgaXNEdXBsaWNhdGUobWVzc2FnZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICAvKiogY3JlYXRlIGEgY2xvbmUgb2YgZ2xvYmFsIGNvbmZpZyBhbmQgYXBwbHkgaW5kaXZpZHVhbCBzZXR0aW5ncyAqL1xuICAgIHByaXZhdGUgYXBwbHlDb25maWc7XG4gICAgLyoqXG4gICAgICogRmluZCB0b2FzdCBvYmplY3QgYnkgaWRcbiAgICAgKi9cbiAgICBwcml2YXRlIF9maW5kVG9hc3Q7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgYXR0YWNoZXMgdG9hc3QgZGF0YSB0byBjb21wb25lbnRcbiAgICAgKiByZXR1cm5zIG51bGwgaWYgdG9hc3QgaXMgZHVwbGljYXRlIGFuZCBwcmV2ZW50RHVwbGljYXRlcyA9PSBUcnVlXG4gICAgICovXG4gICAgcHJpdmF0ZSBfYnVpbGROb3RpZmljYXRpb247XG59XG4iXX0=
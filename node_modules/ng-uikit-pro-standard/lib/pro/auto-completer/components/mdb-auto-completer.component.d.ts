import { AfterContentInit, ElementRef, EventEmitter, Renderer2, QueryList, OnDestroy } from '@angular/core';
import { MdbOptionComponent } from './mdb-option.component';
import { ISelectedOption } from '../interfaces/selected-option.interface';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class MdbAutoCompleterComponent implements AfterContentInit, OnDestroy {
    private renderer;
    private el;
    textNoResults: string;
    clearButton: boolean;
    clearButtonTabIndex: number;
    appendToBody: boolean;
    disabled: boolean;
    visibleOptions: number;
    _visibleOptions: number;
    optionHeight: any;
    _optionHeight: number;
    dropdownHeight: number;
    _dropdownHeight: number;
    displayValue: ((value: any) => string) | null;
    select: EventEmitter<{
        text: string;
        element: any;
    }>;
    selected: EventEmitter<{
        text: string;
        element: any;
    }>;
    optionList: Array<any>;
    mdbOptions: QueryList<MdbOptionComponent>;
    dropdown: ElementRef;
    noResultsEl: ElementRef;
    private _destroy;
    private utils;
    origin: ElementRef;
    parameters: {
        left: number;
        top: number;
        width: number;
        bottom: number;
        inputHeight: number;
    };
    private _isDropdownOpen;
    private _allItems;
    private _isOpen;
    private _selectedItemIndex;
    private _selectedItem;
    private _selectedItemChanged;
    private _isBrowser;
    constructor(renderer: Renderer2, el: ElementRef, platformId: string);
    private _listenToOptionClick;
    private _handleOptionClick;
    setSelectedItem(item: ISelectedOption): void;
    getSelectedItem(): ISelectedOption;
    selectedItemChanged(): Observable<any>;
    isOpen(): boolean;
    _calculatePosition(): void;
    private _calculateAppendPosition;
    show(): void;
    hide(): void;
    isDropdownOpen(): Observable<any>;
    removeHighlight(index: number): void;
    highlightRow(index: number): void;
    navigateUsingKeyboard(event: any): void;
    moveHighlightedIntoView(type: string): void;
    updatePosition(parameters: {
        left: number;
        top: number;
        width: number;
        bottom: number;
    }): void;
    appendDropdown(): void;
    setSingleOptionHeight(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MdbAutoCompleterComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MdbAutoCompleterComponent, "mdb-auto-completer", ["mdbAutoCompleter"], { "clearButton": "clearButton"; "clearButtonTabIndex": "clearButtonTabIndex"; "visibleOptions": "visibleOptions"; "optionHeight": "optionHeight"; "dropdownHeight": "dropdownHeight"; "textNoResults": "textNoResults"; "appendToBody": "appendToBody"; "disabled": "disabled"; "displayValue": "displayValue"; }, { "select": "select"; "selected": "selected"; }, ["optionList", "mdbOptions"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWF1dG8tY29tcGxldGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtZGItYXV0by1jb21wbGV0ZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBSZW5kZXJlcjIsIFF1ZXJ5TGlzdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZGJPcHRpb25Db21wb25lbnQgfSBmcm9tICcuL21kYi1vcHRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IElTZWxlY3RlZE9wdGlvbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvc2VsZWN0ZWQtb3B0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNZGJBdXRvQ29tcGxldGVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWw7XG4gICAgdGV4dE5vUmVzdWx0czogc3RyaW5nO1xuICAgIGNsZWFyQnV0dG9uOiBib29sZWFuO1xuICAgIGNsZWFyQnV0dG9uVGFiSW5kZXg6IG51bWJlcjtcbiAgICBhcHBlbmRUb0JvZHk6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgdmlzaWJsZU9wdGlvbnM6IG51bWJlcjtcbiAgICBfdmlzaWJsZU9wdGlvbnM6IG51bWJlcjtcbiAgICBvcHRpb25IZWlnaHQ6IGFueTtcbiAgICBfb3B0aW9uSGVpZ2h0OiBudW1iZXI7XG4gICAgZHJvcGRvd25IZWlnaHQ6IG51bWJlcjtcbiAgICBfZHJvcGRvd25IZWlnaHQ6IG51bWJlcjtcbiAgICBkaXNwbGF5VmFsdWU6ICgodmFsdWU6IGFueSkgPT4gc3RyaW5nKSB8IG51bGw7XG4gICAgc2VsZWN0OiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIGVsZW1lbnQ6IGFueTtcbiAgICB9PjtcbiAgICBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICBlbGVtZW50OiBhbnk7XG4gICAgfT47XG4gICAgb3B0aW9uTGlzdDogQXJyYXk8YW55PjtcbiAgICBtZGJPcHRpb25zOiBRdWVyeUxpc3Q8TWRiT3B0aW9uQ29tcG9uZW50PjtcbiAgICBkcm9wZG93bjogRWxlbWVudFJlZjtcbiAgICBub1Jlc3VsdHNFbDogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9kZXN0cm95O1xuICAgIHByaXZhdGUgdXRpbHM7XG4gICAgb3JpZ2luOiBFbGVtZW50UmVmO1xuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgbGVmdDogbnVtYmVyO1xuICAgICAgICB0b3A6IG51bWJlcjtcbiAgICAgICAgd2lkdGg6IG51bWJlcjtcbiAgICAgICAgYm90dG9tOiBudW1iZXI7XG4gICAgICAgIGlucHV0SGVpZ2h0OiBudW1iZXI7XG4gICAgfTtcbiAgICBwcml2YXRlIF9pc0Ryb3Bkb3duT3BlbjtcbiAgICBwcml2YXRlIF9hbGxJdGVtcztcbiAgICBwcml2YXRlIF9pc09wZW47XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWRJdGVtSW5kZXg7XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWRJdGVtO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkSXRlbUNoYW5nZWQ7XG4gICAgcHJpdmF0ZSBfaXNCcm93c2VyO1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsOiBFbGVtZW50UmVmLCBwbGF0Zm9ybUlkOiBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2xpc3RlblRvT3B0aW9uQ2xpY2s7XG4gICAgcHJpdmF0ZSBfaGFuZGxlT3B0aW9uQ2xpY2s7XG4gICAgc2V0U2VsZWN0ZWRJdGVtKGl0ZW06IElTZWxlY3RlZE9wdGlvbik6IHZvaWQ7XG4gICAgZ2V0U2VsZWN0ZWRJdGVtKCk6IElTZWxlY3RlZE9wdGlvbjtcbiAgICBzZWxlY3RlZEl0ZW1DaGFuZ2VkKCk6IE9ic2VydmFibGU8YW55PjtcbiAgICBpc09wZW4oKTogYm9vbGVhbjtcbiAgICBfY2FsY3VsYXRlUG9zaXRpb24oKTogdm9pZDtcbiAgICBwcml2YXRlIF9jYWxjdWxhdGVBcHBlbmRQb3NpdGlvbjtcbiAgICBzaG93KCk6IHZvaWQ7XG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIGlzRHJvcGRvd25PcGVuKCk6IE9ic2VydmFibGU8YW55PjtcbiAgICByZW1vdmVIaWdobGlnaHQoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgaGlnaGxpZ2h0Um93KGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIG5hdmlnYXRlVXNpbmdLZXlib2FyZChldmVudDogYW55KTogdm9pZDtcbiAgICBtb3ZlSGlnaGxpZ2h0ZWRJbnRvVmlldyh0eXBlOiBzdHJpbmcpOiB2b2lkO1xuICAgIHVwZGF0ZVBvc2l0aW9uKHBhcmFtZXRlcnM6IHtcbiAgICAgICAgbGVmdDogbnVtYmVyO1xuICAgICAgICB0b3A6IG51bWJlcjtcbiAgICAgICAgd2lkdGg6IG51bWJlcjtcbiAgICAgICAgYm90dG9tOiBudW1iZXI7XG4gICAgfSk6IHZvaWQ7XG4gICAgYXBwZW5kRHJvcGRvd24oKTogdm9pZDtcbiAgICBzZXRTaW5nbGVPcHRpb25IZWlnaHQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19
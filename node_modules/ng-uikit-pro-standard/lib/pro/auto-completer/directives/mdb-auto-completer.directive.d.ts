import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';
import { MdbAutoCompleterComponent } from '../components/mdb-auto-completer.component';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any;
export declare class MdbAutoCompleterDirective implements AfterViewInit, OnDestroy, ControlValueAccessor {
    private renderer;
    private el;
    private document;
    mdbAutoCompleter: MdbAutoCompleterComponent;
    ngModelChange: EventEmitter<any>;
    clearBtnClicked: EventEmitter<any>;
    private _destroy$;
    private _autocompleterInputChanges;
    private _clearButton;
    private _canOpenOnFocus;
    private utils;
    listenToClearClick: Function;
    listenFunc: Function;
    isBrowser: boolean;
    onKeydown(event: any): void;
    _handleInput(event: any): void;
    _handleFocusIn(): void;
    _handleBlurIn(): void;
    handleMouseDown(): void;
    constructor(renderer: Renderer2, el: ElementRef, platformId: string, document: any);
    private _renderClearButton;
    private _updateClearButtonVisibility;
    private _setStyles;
    private _addClass;
    private _clearInput;
    clear(): void;
    _handleKeyDown(event: any): void;
    getCoords(elem: any): any;
    private _isOpen;
    private _show;
    private _hide;
    private _appendDropdownToInput;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    _onChange: (value: any) => void;
    _onTouched: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MdbAutoCompleterDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MdbAutoCompleterDirective, "input[mdbAutoCompleter], textarea[mdbAutoCompleter]", ["mdbAutoCompleterTrigger"], { "mdbAutoCompleter": "mdbAutoCompleter"; }, { "ngModelChange": "ngModelChange"; "clearBtnClicked": "clearBtnClicked"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWF1dG8tY29tcGxldGVyLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJtZGItYXV0by1jb21wbGV0ZXIuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWRiQXV0b0NvbXBsZXRlckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvbWRiLWF1dG8tY29tcGxldGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IE1BVF9BVVRPQ09NUExFVEVfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1kYkF1dG9Db21wbGV0ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSBkb2N1bWVudDtcbiAgICBtZGJBdXRvQ29tcGxldGVyOiBNZGJBdXRvQ29tcGxldGVyQ29tcG9uZW50O1xuICAgIG5nTW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNsZWFyQnRuQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHJpdmF0ZSBfZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBfYXV0b2NvbXBsZXRlcklucHV0Q2hhbmdlcztcbiAgICBwcml2YXRlIF9jbGVhckJ1dHRvbjtcbiAgICBwcml2YXRlIF9jYW5PcGVuT25Gb2N1cztcbiAgICBwcml2YXRlIHV0aWxzO1xuICAgIGxpc3RlblRvQ2xlYXJDbGljazogRnVuY3Rpb247XG4gICAgbGlzdGVuRnVuYzogRnVuY3Rpb247XG4gICAgaXNCcm93c2VyOiBib29sZWFuO1xuICAgIG9uS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICBfaGFuZGxlSW5wdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgX2hhbmRsZUZvY3VzSW4oKTogdm9pZDtcbiAgICBfaGFuZGxlQmx1ckluKCk6IHZvaWQ7XG4gICAgaGFuZGxlTW91c2VEb3duKCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIHBsYXRmb3JtSWQ6IHN0cmluZywgZG9jdW1lbnQ6IGFueSk7XG4gICAgcHJpdmF0ZSBfcmVuZGVyQ2xlYXJCdXR0b247XG4gICAgcHJpdmF0ZSBfdXBkYXRlQ2xlYXJCdXR0b25WaXNpYmlsaXR5O1xuICAgIHByaXZhdGUgX3NldFN0eWxlcztcbiAgICBwcml2YXRlIF9hZGRDbGFzcztcbiAgICBwcml2YXRlIF9jbGVhcklucHV0O1xuICAgIGNsZWFyKCk6IHZvaWQ7XG4gICAgX2hhbmRsZUtleURvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgZ2V0Q29vcmRzKGVsZW06IGFueSk6IGFueTtcbiAgICBwcml2YXRlIF9pc09wZW47XG4gICAgcHJpdmF0ZSBfc2hvdztcbiAgICBwcml2YXRlIF9oaWRlO1xuICAgIHByaXZhdGUgX2FwcGVuZERyb3Bkb3duVG9JbnB1dDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIF9vbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gICAgX29uVG91Y2hlZDogKCkgPT4gdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB7fSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZDtcbn1cbiJdfQ==
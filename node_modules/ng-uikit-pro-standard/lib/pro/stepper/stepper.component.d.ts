import { QueryList, AfterContentInit, ElementRef, AfterViewInit, Renderer2, AfterContentChecked, EventEmitter, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { MdbStepComponent } from './step.component';
import { WavesDirective } from '../../free/waves/waves-effect.directive';
import { Observable, Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class StepChangeEvent {
    activeStep: MdbStepComponent;
    activeStepIndex: number;
    previousStep: MdbStepComponent;
    previousStepIndex: number;
}
export declare class MdbStepperComponent implements AfterContentInit, AfterViewInit, AfterContentChecked, OnDestroy {
    ripple: WavesDirective;
    private _renderer;
    private _cdRef;
    steps: QueryList<MdbStepComponent>;
    stepTitles: QueryList<ElementRef>;
    stepContents: QueryList<ElementRef>;
    container: ElementRef;
    linear: boolean;
    disableWaves: boolean;
    vertical: boolean;
    private _vertical;
    stepChange: EventEmitter<StepChangeEvent>;
    constructor(ripple: WavesDirective, _renderer: Renderer2, _cdRef: ChangeDetectorRef, platformId: string);
    private _destroy;
    isBrowser: boolean;
    horizontal: boolean;
    activeStepIndex: number;
    private _activeStepIndex;
    private _activeStep;
    private stepTextContent;
    stepChangeSubject: Subject<any>;
    stepChange$: Observable<any>;
    getStepChange$(): Observable<any>;
    onClick(index: number, event: any): void;
    private _isStepValid;
    getAnimationState(index: number): string;
    private _getStepByIndex;
    next(): void;
    previous(): void;
    submit(): void;
    setNewActiveStep(index: number): void;
    private _markCurrentAsDone;
    private _markCurrentAsWrong;
    private _markStepControlsAsDirty;
    private _removeStepValidationClasses;
    private _isNewStepLinear;
    private _setActiveStep;
    private _removeCurrentActiveStep;
    resetAll(): void;
    private _updateHorizontalStepperHeight;
    private _initStepperVariation;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MdbStepperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MdbStepperComponent, "mdb-stepper", ["mdbStepper"], { "linear": "linear"; "disableWaves": "disableWaves"; "vertical": "vertical"; }, { "stepChange": "stepChange"; }, ["steps"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3RlcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQsIFJlbmRlcmVyMiwgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZGJTdGVwQ29tcG9uZW50IH0gZnJvbSAnLi9zdGVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBXYXZlc0RpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2ZyZWUvd2F2ZXMvd2F2ZXMtZWZmZWN0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdGVwQ2hhbmdlRXZlbnQge1xuICAgIGFjdGl2ZVN0ZXA6IE1kYlN0ZXBDb21wb25lbnQ7XG4gICAgYWN0aXZlU3RlcEluZGV4OiBudW1iZXI7XG4gICAgcHJldmlvdXNTdGVwOiBNZGJTdGVwQ29tcG9uZW50O1xuICAgIHByZXZpb3VzU3RlcEluZGV4OiBudW1iZXI7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNZGJTdGVwcGVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgICByaXBwbGU6IFdhdmVzRGlyZWN0aXZlO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIHByaXZhdGUgX2NkUmVmO1xuICAgIHN0ZXBzOiBRdWVyeUxpc3Q8TWRiU3RlcENvbXBvbmVudD47XG4gICAgc3RlcFRpdGxlczogUXVlcnlMaXN0PEVsZW1lbnRSZWY+O1xuICAgIHN0ZXBDb250ZW50czogUXVlcnlMaXN0PEVsZW1lbnRSZWY+O1xuICAgIGNvbnRhaW5lcjogRWxlbWVudFJlZjtcbiAgICBsaW5lYXI6IGJvb2xlYW47XG4gICAgZGlzYWJsZVdhdmVzOiBib29sZWFuO1xuICAgIHZlcnRpY2FsOiBib29sZWFuO1xuICAgIHByaXZhdGUgX3ZlcnRpY2FsO1xuICAgIHN0ZXBDaGFuZ2U6IEV2ZW50RW1pdHRlcjxTdGVwQ2hhbmdlRXZlbnQ+O1xuICAgIGNvbnN0cnVjdG9yKHJpcHBsZTogV2F2ZXNEaXJlY3RpdmUsIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBfY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwbGF0Zm9ybUlkOiBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2Rlc3Ryb3k7XG4gICAgaXNCcm93c2VyOiBib29sZWFuO1xuICAgIGhvcml6b250YWw6IGJvb2xlYW47XG4gICAgYWN0aXZlU3RlcEluZGV4OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfYWN0aXZlU3RlcEluZGV4O1xuICAgIHByaXZhdGUgX2FjdGl2ZVN0ZXA7XG4gICAgcHJpdmF0ZSBzdGVwVGV4dENvbnRlbnQ7XG4gICAgc3RlcENoYW5nZVN1YmplY3Q6IFN1YmplY3Q8YW55PjtcbiAgICBzdGVwQ2hhbmdlJDogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIGdldFN0ZXBDaGFuZ2UkKCk6IE9ic2VydmFibGU8YW55PjtcbiAgICBvbkNsaWNrKGluZGV4OiBudW1iZXIsIGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgX2lzU3RlcFZhbGlkO1xuICAgIGdldEFuaW1hdGlvblN0YXRlKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfZ2V0U3RlcEJ5SW5kZXg7XG4gICAgbmV4dCgpOiB2b2lkO1xuICAgIHByZXZpb3VzKCk6IHZvaWQ7XG4gICAgc3VibWl0KCk6IHZvaWQ7XG4gICAgc2V0TmV3QWN0aXZlU3RlcChpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBwcml2YXRlIF9tYXJrQ3VycmVudEFzRG9uZTtcbiAgICBwcml2YXRlIF9tYXJrQ3VycmVudEFzV3Jvbmc7XG4gICAgcHJpdmF0ZSBfbWFya1N0ZXBDb250cm9sc0FzRGlydHk7XG4gICAgcHJpdmF0ZSBfcmVtb3ZlU3RlcFZhbGlkYXRpb25DbGFzc2VzO1xuICAgIHByaXZhdGUgX2lzTmV3U3RlcExpbmVhcjtcbiAgICBwcml2YXRlIF9zZXRBY3RpdmVTdGVwO1xuICAgIHByaXZhdGUgX3JlbW92ZUN1cnJlbnRBY3RpdmVTdGVwO1xuICAgIHJlc2V0QWxsKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfdXBkYXRlSG9yaXpvbnRhbFN0ZXBwZXJIZWlnaHQ7XG4gICAgcHJpdmF0ZSBfaW5pdFN0ZXBwZXJWYXJpYXRpb247XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==
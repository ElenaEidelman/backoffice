import { AfterContentChecked, AfterViewInit, ElementRef, EventEmitter, OnInit, Renderer2, ChangeDetectorRef, NgZone } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare const TIME_PIRCKER_VALUE_ACCESSOT: any;
export declare class ClockPickerComponent implements OnInit, AfterViewInit, ControlValueAccessor, AfterContentChecked {
    elem: ElementRef;
    renderer: Renderer2;
    private _cdRef;
    private _ngZone;
    private _document;
    hoursPlate: ElementRef;
    minutesPlate: ElementRef;
    plate: ElementRef;
    svg: ElementRef;
    g: ElementRef;
    hand: ElementRef;
    fg: ElementRef;
    bg: ElementRef;
    bearing: ElementRef;
    twelvehour: boolean;
    darktheme: boolean;
    placeholder: String;
    label: string;
    duration: number;
    showClock: boolean;
    buttonLabel: string;
    disabled: boolean;
    tabIndex: any;
    outlineInput: boolean;
    openOnFocus: boolean;
    readonly: boolean;
    timeChanged: EventEmitter<string>;
    isOpen: boolean;
    isMobile: any;
    touchDevice: boolean;
    showHours: boolean;
    moveEvent: string;
    tapEvent: string;
    elements: HTMLCollectionOf<Element>;
    elementNumber: any;
    dialRadius: number;
    outerRadius: number;
    innerRadius: number;
    tickRadius: number;
    diameter: number;
    isBrowser: any;
    hoursTicks: any;
    minutesTicks: any;
    selectedHours: any;
    endHours: string;
    touchSupported: any;
    mousedownEvent: any;
    mousemoveEvent: any;
    mouseupEvent: any;
    isMouseDown: boolean;
    documentClickFun: Function;
    constructor(elem: ElementRef, renderer: Renderer2, _cdRef: ChangeDetectorRef, _ngZone: NgZone, _document: any, platformId: string);
    ontouchmove(event: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentChecked(): void;
    checkDraw(): void;
    mousedown(e: any, space?: any): void;
    hideKeyboard(): void;
    onFocusInput(): void;
    openBtnClicked(): void;
    private _handleOutsideClick;
    closeBtnClicked(): void;
    close(): void;
    clearTimeInput(): void;
    setHour(hour: String): void;
    setMinute(min: String): void;
    setAmPm(ampm: String): void;
    showHoursClock(): void;
    showMinutesClock(): void;
    generateTick(): void;
    setHand(x: any, y: any, roundBy5: any): void;
    offset(obj: any): {
        left: number;
        top: number;
    };
    private _getFormattedTime;
    onChangeCb: (_: any) => void;
    onTouchedCb: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClockPickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClockPickerComponent, "mdb-time-picker", never, { "twelvehour": "twelvehour"; "darktheme": "darktheme"; "placeholder": "placeholder"; "label": "label"; "duration": "duration"; "showClock": "showClock"; "disabled": "disabled"; "outlineInput": "outlineInput"; "openOnFocus": "openOnFocus"; "readonly": "readonly"; "buttonLabel": "buttonLabel"; "tabIndex": "tabIndex"; }, { "timeChanged": "timeChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGltZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRDaGVja2VkLCBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFRJTUVfUElSQ0tFUl9WQUxVRV9BQ0NFU1NPVDogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xvY2tQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlckNvbnRlbnRDaGVja2VkIHtcbiAgICBlbGVtOiBFbGVtZW50UmVmO1xuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgcHJpdmF0ZSBfY2RSZWY7XG4gICAgcHJpdmF0ZSBfbmdab25lO1xuICAgIHByaXZhdGUgX2RvY3VtZW50O1xuICAgIGhvdXJzUGxhdGU6IEVsZW1lbnRSZWY7XG4gICAgbWludXRlc1BsYXRlOiBFbGVtZW50UmVmO1xuICAgIHBsYXRlOiBFbGVtZW50UmVmO1xuICAgIHN2ZzogRWxlbWVudFJlZjtcbiAgICBnOiBFbGVtZW50UmVmO1xuICAgIGhhbmQ6IEVsZW1lbnRSZWY7XG4gICAgZmc6IEVsZW1lbnRSZWY7XG4gICAgYmc6IEVsZW1lbnRSZWY7XG4gICAgYmVhcmluZzogRWxlbWVudFJlZjtcbiAgICB0d2VsdmVob3VyOiBib29sZWFuO1xuICAgIGRhcmt0aGVtZTogYm9vbGVhbjtcbiAgICBwbGFjZWhvbGRlcjogU3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgZHVyYXRpb246IG51bWJlcjtcbiAgICBzaG93Q2xvY2s6IGJvb2xlYW47XG4gICAgYnV0dG9uTGFiZWw6IHN0cmluZztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB0YWJJbmRleDogYW55O1xuICAgIG91dGxpbmVJbnB1dDogYm9vbGVhbjtcbiAgICBvcGVuT25Gb2N1czogYm9vbGVhbjtcbiAgICByZWFkb25seTogYm9vbGVhbjtcbiAgICB0aW1lQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgaXNPcGVuOiBib29sZWFuO1xuICAgIGlzTW9iaWxlOiBhbnk7XG4gICAgdG91Y2hEZXZpY2U6IGJvb2xlYW47XG4gICAgc2hvd0hvdXJzOiBib29sZWFuO1xuICAgIG1vdmVFdmVudDogc3RyaW5nO1xuICAgIHRhcEV2ZW50OiBzdHJpbmc7XG4gICAgZWxlbWVudHM6IEhUTUxDb2xsZWN0aW9uT2Y8RWxlbWVudD47XG4gICAgZWxlbWVudE51bWJlcjogYW55O1xuICAgIGRpYWxSYWRpdXM6IG51bWJlcjtcbiAgICBvdXRlclJhZGl1czogbnVtYmVyO1xuICAgIGlubmVyUmFkaXVzOiBudW1iZXI7XG4gICAgdGlja1JhZGl1czogbnVtYmVyO1xuICAgIGRpYW1ldGVyOiBudW1iZXI7XG4gICAgaXNCcm93c2VyOiBhbnk7XG4gICAgaG91cnNUaWNrczogYW55O1xuICAgIG1pbnV0ZXNUaWNrczogYW55O1xuICAgIHNlbGVjdGVkSG91cnM6IGFueTtcbiAgICBlbmRIb3Vyczogc3RyaW5nO1xuICAgIHRvdWNoU3VwcG9ydGVkOiBhbnk7XG4gICAgbW91c2Vkb3duRXZlbnQ6IGFueTtcbiAgICBtb3VzZW1vdmVFdmVudDogYW55O1xuICAgIG1vdXNldXBFdmVudDogYW55O1xuICAgIGlzTW91c2VEb3duOiBib29sZWFuO1xuICAgIGRvY3VtZW50Q2xpY2tGdW46IEZ1bmN0aW9uO1xuICAgIGNvbnN0cnVjdG9yKGVsZW06IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIF9jZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIF9uZ1pvbmU6IE5nWm9uZSwgX2RvY3VtZW50OiBhbnksIHBsYXRmb3JtSWQ6IHN0cmluZyk7XG4gICAgb250b3VjaG1vdmUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICBjaGVja0RyYXcoKTogdm9pZDtcbiAgICBtb3VzZWRvd24oZTogYW55LCBzcGFjZT86IGFueSk6IHZvaWQ7XG4gICAgaGlkZUtleWJvYXJkKCk6IHZvaWQ7XG4gICAgb25Gb2N1c0lucHV0KCk6IHZvaWQ7XG4gICAgb3BlbkJ0bkNsaWNrZWQoKTogdm9pZDtcbiAgICBwcml2YXRlIF9oYW5kbGVPdXRzaWRlQ2xpY2s7XG4gICAgY2xvc2VCdG5DbGlja2VkKCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBjbGVhclRpbWVJbnB1dCgpOiB2b2lkO1xuICAgIHNldEhvdXIoaG91cjogU3RyaW5nKTogdm9pZDtcbiAgICBzZXRNaW51dGUobWluOiBTdHJpbmcpOiB2b2lkO1xuICAgIHNldEFtUG0oYW1wbTogU3RyaW5nKTogdm9pZDtcbiAgICBzaG93SG91cnNDbG9jaygpOiB2b2lkO1xuICAgIHNob3dNaW51dGVzQ2xvY2soKTogdm9pZDtcbiAgICBnZW5lcmF0ZVRpY2soKTogdm9pZDtcbiAgICBzZXRIYW5kKHg6IGFueSwgeTogYW55LCByb3VuZEJ5NTogYW55KTogdm9pZDtcbiAgICBvZmZzZXQob2JqOiBhbnkpOiB7XG4gICAgICAgIGxlZnQ6IG51bWJlcjtcbiAgICAgICAgdG9wOiBudW1iZXI7XG4gICAgfTtcbiAgICBwcml2YXRlIF9nZXRGb3JtYXR0ZWRUaW1lO1xuICAgIG9uQ2hhbmdlQ2I6IChfOiBhbnkpID0+IHZvaWQ7XG4gICAgb25Ub3VjaGVkQ2I6ICgpID0+IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xufVxuIl19
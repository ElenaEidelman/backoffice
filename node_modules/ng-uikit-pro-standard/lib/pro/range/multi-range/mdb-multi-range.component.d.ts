import { ElementRef, EventEmitter, Renderer2, OnInit, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare const RANGE_VALUE_ACCESOR: any;
export declare class MdbMultiRangeInputComponent implements OnInit, AfterViewInit, ControlValueAccessor {
    private renderer;
    id: string;
    required: boolean;
    name: string;
    value: {
        first: number | string;
        second: number | string;
    };
    disabled: boolean;
    min: number;
    max: number;
    step: number;
    rangeValueChange: EventEmitter<{
        first: number;
        second: number;
    }>;
    firstInput: ElementRef;
    secondInput: ElementRef;
    firstRangeCloud: ElementRef;
    secondRangeCloud: ElementRef;
    rangeField: ElementRef;
    range: any;
    steps: number;
    stepLength: number;
    firstVisibility: boolean;
    secondVisibility: boolean;
    cloudRange: number;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    firstRangeInput(event: any): any;
    secondRangeInput(event: any): any;
    private moveValueCloud;
    focusRangeInput(element: string): void;
    blurRangeInput(element: string): void;
    checkIfSafari(): boolean;
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MdbMultiRangeInputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MdbMultiRangeInputComponent, "mdb-multi-range-input", never, { "value": "value"; "min": "min"; "max": "max"; "disabled": "disabled"; "id": "id"; "required": "required"; "name": "name"; "step": "step"; }, { "rangeValueChange": "rangeValueChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLW11bHRpLXJhbmdlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtZGItbXVsdGktcmFuZ2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXIyLCBPbkluaXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgUkFOR0VfVkFMVUVfQUNDRVNPUjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWRiTXVsdGlSYW5nZUlucHV0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBpZDogc3RyaW5nO1xuICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB2YWx1ZToge1xuICAgICAgICBmaXJzdDogbnVtYmVyIHwgc3RyaW5nO1xuICAgICAgICBzZWNvbmQ6IG51bWJlciB8IHN0cmluZztcbiAgICB9O1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIG1pbjogbnVtYmVyO1xuICAgIG1heDogbnVtYmVyO1xuICAgIHN0ZXA6IG51bWJlcjtcbiAgICByYW5nZVZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBmaXJzdDogbnVtYmVyO1xuICAgICAgICBzZWNvbmQ6IG51bWJlcjtcbiAgICB9PjtcbiAgICBmaXJzdElucHV0OiBFbGVtZW50UmVmO1xuICAgIHNlY29uZElucHV0OiBFbGVtZW50UmVmO1xuICAgIGZpcnN0UmFuZ2VDbG91ZDogRWxlbWVudFJlZjtcbiAgICBzZWNvbmRSYW5nZUNsb3VkOiBFbGVtZW50UmVmO1xuICAgIHJhbmdlRmllbGQ6IEVsZW1lbnRSZWY7XG4gICAgcmFuZ2U6IGFueTtcbiAgICBzdGVwczogbnVtYmVyO1xuICAgIHN0ZXBMZW5ndGg6IG51bWJlcjtcbiAgICBmaXJzdFZpc2liaWxpdHk6IGJvb2xlYW47XG4gICAgc2Vjb25kVmlzaWJpbGl0eTogYm9vbGVhbjtcbiAgICBjbG91ZFJhbmdlOiBudW1iZXI7XG4gICAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBmaXJzdFJhbmdlSW5wdXQoZXZlbnQ6IGFueSk6IGFueTtcbiAgICBzZWNvbmRSYW5nZUlucHV0KGV2ZW50OiBhbnkpOiBhbnk7XG4gICAgcHJpdmF0ZSBtb3ZlVmFsdWVDbG91ZDtcbiAgICBmb2N1c1JhbmdlSW5wdXQoZWxlbWVudDogc3RyaW5nKTogdm9pZDtcbiAgICBibHVyUmFuZ2VJbnB1dChlbGVtZW50OiBzdHJpbmcpOiB2b2lkO1xuICAgIGNoZWNrSWZTYWZhcmkoKTogYm9vbGVhbjtcbiAgICBvbkNoYW5nZTogKF86IGFueSkgPT4gdm9pZDtcbiAgICBvblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbn1cbiJdfQ==